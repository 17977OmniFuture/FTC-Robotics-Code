package org.firstinspires.ftc.teamcode.centerstage;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.hardware.motors.GoBILDA5202Series;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.robotcore.hardware.Servo;

@TeleOp(name="CSDriverTest", group="AA")
public class CSDriverTest extends LinearOpMode{

    //FL is the left front motor, FR is the right front motor, etc
    private DcMotor FL = null; //port 0
    private DcMotor FR = null; //port 1
    private DcMotor BR = null; //port 2
    private DcMotor BL = null; //port 3
    private DcMotor VS = null;
    private DcMotor WG = null;

    private DcMotor leftEncoder = null;
    private DcMotor rightEncoder = null;
    private DcMotor headingEncoder = null;

    // scale factor (maybe change values. Experimentation
    double drivetrain_scale_factor = 0.55;

    //just setting things to give base values (doesn't mean anything)
    double motor_power_base = 1;
    double a_BR_power_base = 1;
    double b_BL_power_base = 1;
    double FL_power = 1;
    double FR_power = 1;
    double BR_power = 1;
    double BL_power = 1;
    double VS_power = 1;

    //constants which define the geometry of the robot and how this translates into movement
    final static double L = 23.02; //length between the two aligned encoders, in cm
    final static double B = 24.13; //length between the midpoint of aligned encoders and third encoder
    final static double R = 4.8; //wheel radius, in cm
    final static double N = 8192; //encoder ticks per revolution, REV encoder
    final static double cm_per_tick = 2 * Math.PI * R / N;

    //keeps track of the odometry values between updates
    public int currentLeftPos = 0;
    public int currentRightPos = 0;
    public int currentHeadPos = 0;
    private int oldLeftPos = 0;
    private int oldRightPos = 0;
    private int oldHeadPos = 0;

    //note, in a mechanum drivetrain, you will frequently need to
    //make use of wheels that are ACROSS the robot from one another
    //e.g. FL and BR

    //In this section, between the ^^ definition of the motors and
    //the vv actual beginning of the OpMode (program that runs) is
    //where you put the functions you want to use in the code (ie)
    //claw function or drive function

    //public XyhVector START_POS = new XyhVector(213,102,Math.toRadians(-174));
    //public XyhVector pos = new XyhVector(START_POS);

    /*public void odometry () {

        oldLeftPos = currentLeftPos;
        oldRightPos = currentRightPos;
        oldHeadPos = currentHeadPos;

        currentLeftPos = -leftEncoder.getCurrentPosition();
        currentRightPos = -rightEncoder.getCurrentPosition();
        currentHeadPos = headingEncoder.getCurrentPosition();

        int dn1 = currentLeftPos - oldLeftPos;
        int dn2 = currentRightPos - oldRightPos;
        int dn3 = currentHeadPos - oldHeadPos;

        double dtheta = cm_per_tick * (dn2-dn1) / L;
        double dx = cm_per_tick * (dn2+dn1) / 2;
        double dy = cm_per_tick * (dn3 - ((dn2-dn1)* B / L));

        double theta = pos.h + (dtheta/2);
        pos.x += (dx * Math.cos(theta)) - (dy * Math.sin(theta));
        pos.y += (dx * Math.cos(theta)) + (dy * Math.sin(theta));
        pos.h += dtheta;

    }*/

    @Override
    public void runOpMode() {

        //define the motors
        FL = hardwareMap.get(DcMotor.class, "FL");
        FR = hardwareMap.get(DcMotor.class, "FR");
        BR = hardwareMap.get(DcMotor.class, "BR");
        BL = hardwareMap.get(DcMotor.class, "BL");
        VS = hardwareMap.get(DcMotor.class, "VS");
        WG = hardwareMap.get(DcMotor.class, "WG");

        //tell the motors to read their encoders (and reset each one)
        FL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        FR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        VS.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        WG.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        FL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        FR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        BR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        BL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        VS.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        WG.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        //tell the motors to run backward or forward depending on what makes
        // it easiest to drive (different for different drive trains)
        FL.setDirection(DcMotor.Direction.FORWARD);
        FR.setDirection(DcMotor.Direction.REVERSE);
        BR.setDirection(DcMotor.Direction.FORWARD);
        BL.setDirection(DcMotor.Direction.REVERSE);
        VS.setDirection(DcMotor.Direction.FORWARD);
        WG.setDirection(DcMotor.Direction.FORWARD);

        //tell the motors to brake when not being told to move (the robot
        //will no longer coast
        FL.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        FR.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        BL.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        BR.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        VS.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        WG.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);



        //set the odometry encoders to shadow the motors
        leftEncoder = FL;
        rightEncoder = BR;
        headingEncoder = FR;

        waitForStart();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {


            // base of motor power
            motor_power_base = gamepad1.left_stick_y;

            // differentiating between ac and bd motors (strafing code)
            a_BR_power_base = motor_power_base - gamepad1.right_stick_x;
            b_BL_power_base = motor_power_base + gamepad1.right_stick_x;

            // setting the actual powers (turning code) - to make unable to turn right, remove the minuses
            FL_power = a_BR_power_base - gamepad1.left_stick_x;
            FR_power = b_BL_power_base + gamepad1.left_stick_x;
            BR_power = a_BR_power_base + gamepad1.left_stick_x;
            BL_power = b_BL_power_base - gamepad1.left_stick_x;

            // clip all the powers down to 1
            FL_power = Range.clip(FL_power * drivetrain_scale_factor, -1.0, 1.0);
            FR_power = Range.clip(FR_power * drivetrain_scale_factor, -1.0, 1.0);
            BR_power = Range.clip(BR_power * drivetrain_scale_factor, -1.0, 1.0);
            BL_power = Range.clip(BL_power * drivetrain_scale_factor, -1.0, 1.0);


            // set the motor powers
            FL.setPower(-1*FL_power);
            FR.setPower(-1*FR_power);
            BR.setPower(-1*BR_power);
            BL.setPower(-1*BL_power);

            VS_power = gamepad2.right_stick_y*0.8;

            if (VS.getCurrentPosition()>-100) {

                VS_power = Range.clip(VS_power, -1,0);

            } else if (VS.getCurrentPosition()>-2200) {
                
                VS_power = Range.clip(VS_power, -1,1);
                
            } else {
                
                VS_power = Range.clip(VS_power, 0,1);
                
            }

            VS.setPower(VS_power);
            telemetry.addData("Position of arm: ", VS.getCurrentPosition());


            WG.setPower(-1*gamepad2.left_stick_y);
            
            if (WG.getCurrentPosition()<60) {
                
                VS_power = Range.clip(VS_power, 0,1);
                
            }
            


            telemetry.addData("Motor 0 Odometry:", FR.getCurrentPosition());
            telemetry.addData("Motor 1 Odometry:", FL.getCurrentPosition());
            telemetry.addData("Motor 2 Odometry:", BR.getCurrentPosition());
            telemetry.update();

        }



    }



}
