/* Copyright (c) 2019 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode.centerstage;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;

import org.firstinspires.ftc.robotcore.external.hardware.camera.BuiltinCameraDirection;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.vision.VisionPortal;
import org.firstinspires.ftc.vision.tfod.TfodProcessor;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotor;
import java.lang.annotation.Target;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import java.util.List;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;

import java.util.List;

/*
 * This OpMode illustrates the basics of TensorFlow Object Detection,
 * including Java Builder structures for specifying Vision parameters.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this OpMode to the Driver Station OpMode list.
 */

@Autonomous(name="CSRedLeftDwayne")
public class CSRedLeftDwayne extends LinearOpMode {
    private DcMotor FL = null; //port 0
    private DcMotor FR = null; //port 1
    private DcMotor BR = null; //port 2
    private DcMotor BL = null; //port 3
    private DcMotor VS = null;
    private DcMotor WG = null;
    private Servo CS = null;
    private Servo PP = null;
    boolean detected = false;

    private static final boolean USE_WEBCAM = true;  // true for webcam, false for phone camera

    // TFOD_MODEL_ASSET points to a model file stored in the project Asset location,
    // this is only used for Android Studio when using models in Assets.
    private static final String TFOD_MODEL_ASSET = "MyModelStoredAsAsset.tflite";
    // TFOD_MODEL_FILE points to a model file stored onboard the Robot Controller's storage,
    // this is used when uploading models directly to the RC using the model upload interface.
    private static final String TFOD_MODEL_FILE = "/sdcard/FIRST/tflitemodels/RedDwayne2.tflite";
    // Define the labels recognized in the model for TFOD (must be in training order!)
    private static final String[] LABELS = {
            "BlueDwayne2",
    };

    /**
     * The variable to store our instance of the TensorFlow Object Detection processor.
     */
    private TfodProcessor tfod;

    /**
     * The variable to store our instance of the vision portal.
     */
    private VisionPortal visionPortal;

    private void MoveForwardDistance (int Target, double Power) {

        //makes sure the motors go the right way
        FL.setDirection(DcMotor.Direction.FORWARD);
        FR.setDirection(DcMotor.Direction.REVERSE);
        BR.setDirection(DcMotor.Direction.FORWARD);
        BL.setDirection(DcMotor.Direction.REVERSE);

        //sets the motor positions to zero so they can measure how far they travel
        FL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        FR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        //makes sure the motors know how far they need to turn
        FL.setTargetPosition(Target);
        FR.setTargetPosition(Target);
        BR.setTargetPosition(Target);
        BL.setTargetPosition(Target);

        //sets the motors to run to a certain position
        FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);


        if (Target >= 0) {

            while (!(FL.getCurrentPosition() <= Target - 10)) {

                FL.setPower(Power);
                FR.setPower(Power);
                BR.setPower(Power);
                BL.setPower(Power);

            }

        } else {

            while (!(FL.getCurrentPosition() <= -1*Target - 10)) {

                FL.setPower(Power);
                FR.setPower(Power);
                BR.setPower(Power);
                BL.setPower(Power);

            }

        }

        //power motors
        FL.setPower(Power);
        FR.setPower(Power);
        BR.setPower(Power);
        BL.setPower(Power);


    }

    //when target is negative, make sure power is negative !!!! - negative means left
    private void Turn (int Target, double Power) {

        //makes sure the motors go the right way
        FL.setDirection(DcMotor.Direction.FORWARD);
        FR.setDirection(DcMotor.Direction.FORWARD);
        BR.setDirection(DcMotor.Direction.FORWARD);
        BL.setDirection(DcMotor.Direction.FORWARD);

        //sets the motor positions to zero so they can measure how far they travel
        FL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        FR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        //makes sure the motors know how far they need to turn
        FL.setTargetPosition(Target);
        FR.setTargetPosition(Target);
        BR.setTargetPosition(Target);
        BL.setTargetPosition(Target);

        //sets the motors to run to a certain position
        FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);


        if (Target >= 0) {

            while (!(FL.getCurrentPosition() <= Target - 10)) {

                FL.setPower(Power);
                FR.setPower(Power);
                BR.setPower(Power);
                BL.setPower(Power);

            }

        } else {

            while (!(FL.getCurrentPosition() <= -1*Target - 10)) {

                FL.setPower(Power);
                FR.setPower(Power);
                BR.setPower(Power);
                BL.setPower(Power);

            }

        }

        //power motors
        FL.setPower(Power);
        FR.setPower(Power);
        BR.setPower(Power);
        BL.setPower(Power);


    }

    //heading uses set values, 0 = left, 1 = right, anything else is backwards
    private void Strafe (int Target, double Power, int direction) {

        //makes sure the motors go the right way
        FL.setDirection(DcMotor.Direction.FORWARD);
        FR.setDirection(DcMotor.Direction.FORWARD);
        BR.setDirection(DcMotor.Direction.FORWARD);
        BL.setDirection(DcMotor.Direction.FORWARD);

        //sets the motor positions to zero so they can measure how far they travel
        FL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        FR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);


        if (direction == 0) {

            //left
            FL.setDirection(DcMotor.Direction.REVERSE);
            BR.setDirection(DcMotor.Direction.REVERSE);
            FL.setTargetPosition(Target);
            FR.setTargetPosition(-1*Target);
            BR.setTargetPosition(-1*Target);
            BL.setTargetPosition(Target);


        } else if (direction == 1) {

            //right
            FR.setDirection(DcMotor.Direction.REVERSE);
            BL.setDirection(DcMotor.Direction.REVERSE);
            FL.setTargetPosition(-1*Target);
            FR.setTargetPosition(Target);
            BR.setTargetPosition(Target);
            BL.setTargetPosition(-1*Target);

        } else {

            //back
            FL.setTargetPosition(-1*Target);
            FR.setTargetPosition(-1*Target);
            BR.setTargetPosition(Target);
            BL.setTargetPosition(Target);

        }

        //sets the motors to run to a certain position
        FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        if (Target >= 0) {

            while (!(FL.getCurrentPosition() <= Target - 10)) {

                FL.setPower(Power);
                FR.setPower(Power);
                BR.setPower(Power);
                BL.setPower(Power);

            }

        } else {

            while (!(FL.getCurrentPosition() <= -1*Target - 10)) {

                FL.setPower(Power);
                FR.setPower(Power);
                BR.setPower(Power);
                BL.setPower(Power);

            }

        }



    }

    private void RaiseArm (int target) {

        WG.setTargetPosition(target);
        WG.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        WG.setPower(1);


    }
    
    private void ServoPP (double target) {
        
        PP.setPosition(target);
        
    }

    @Override
    public void runOpMode() {

        initTfod();

        FL = hardwareMap.get(DcMotor.class, "FL");
        FR = hardwareMap.get(DcMotor.class, "FR");
        BR = hardwareMap.get(DcMotor.class, "BR");
        BL = hardwareMap.get(DcMotor.class, "BL");
        VS = hardwareMap.get(DcMotor.class, "VS");
        WG = hardwareMap.get(DcMotor.class, "WG");
        CS = hardwareMap.get(Servo.class,   "CS");
        PP = hardwareMap.get(Servo.class,   "PP");
        WG.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        WG.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Wait for the DS start button to be touched.
        telemetry.addData("DS preview on/off", "3 dots, Camera Stream");
        telemetry.addData(">", "Touch Play to start OpMode");
        telemetry.update();
        waitForStart();

        if (opModeIsActive()) {

            //if it sees an object
            //move forward and drop object
            //wait
            CS.setPosition(0.42);
            ServoPP(0.04);
            MoveForwardDistance(700,0.3);
            sleep(1200);
            telemetryTfod();
            sleep(1000);
            telemetry.update();
            telemetryTfod();
            sleep(1000);
            telemetry.update();
            telemetryTfod();
            sleep(1000);
            telemetry.update();


            if (detected==true) {

                telemetry.addData("Recognized 1!", CS.getPosition());
                telemetry.update();
                MoveForwardDistance(650,0.4);
                sleep(1400);
                Turn(1150,0.3);
                sleep(3000);
                MoveForwardDistance(400,0.6);
                sleep(500);
                ServoPP(1);
                sleep(500);
                Strafe(1500,0.5,1);
                sleep(4000);
                Turn(-100,-0.5);
                sleep(500);
                MoveForwardDistance(-4400,1);
                sleep(4000);
                Turn(-2200,-0.6);
                sleep(3000);
                RaiseArm(200);
                sleep(500);
                MoveForwardDistance(300,0.5);
                sleep(700);
                MoveForwardDistance(-300,0.5);
                sleep(700);
                RaiseArm(0);
                sleep(30000);

            } else {

                //move cam servo to look at next position
                MoveForwardDistance(400,0.6);
                CS.setPosition(0.67);
                sleep(800);
                Strafe(100,0.5,1);
                telemetryTfod();
                sleep(1000);
                telemetry.update();
                telemetryTfod();
                sleep(1000);
                telemetry.update();
                telemetryTfod();
                sleep(1000);
                telemetry.update();

                if (detected==true) {

                    telemetry.addData("Recognized 2!", CS.getPosition());
                    telemetry.update();
                    MoveForwardDistance(650, 0.4);
                    sleep(1000);
                    ServoPP(1);
                    sleep(1000);
                    MoveForwardDistance(800, 0.4);
                    sleep(1600);
                    Turn(-1150, 0.5);
                    sleep(2000);
                    MoveForwardDistance(4000, 1);
                    sleep(3000);
                    Turn(-700,0.3);
                    sleep(1500);
                    MoveForwardDistance(400,0.5);
                    sleep(1000);
                    RaiseArm(200);
                    sleep(500);
                    MoveForwardDistance(-400,0.8);
                    sleep(1000);
                    RaiseArm(0);
                    sleep(500);
                    MoveForwardDistance(400,0.8);
                    sleep(30000);
                    

                } else {

                    telemetry.addData("Recognized 3!", CS.getPosition());
                    telemetry.update();
                    sleep(1400);
                    MoveForwardDistance(100,0.3);
                    sleep(500);
                    Turn(-1150,-0.3);
                    sleep(3000);
                    MoveForwardDistance(850,0.6);
                    sleep(500);
                    ServoPP(1);
                    sleep(500);
                    MoveForwardDistance(3200,0.6);
                    sleep(3000);
                    Strafe(1400,0.5,1);
                    sleep(2000);
                    MoveForwardDistance(700,0.4);
                    sleep(1500);
                    RaiseArm(200);
                    sleep(500);
                    MoveForwardDistance(-500,0.5);
                    sleep(1000);
                    RaiseArm(0);
                    sleep(30000);



                }


            }


            // Share the CPU.
            sleep(20);
        }

        // Save more CPU resources when camera is no longer needed.
        visionPortal.close();

    }   // end runOpMode()

    /**
     * Initialize the TensorFlow Object Detection processor.
     */
    private void initTfod() {

        // Create the TensorFlow processor by using a builder.
        tfod = new TfodProcessor.Builder()

                // With the following lines commented out, the default TfodProcessor Builder
                // will load the default model for the season. To define a custom model to load,
                // choose one of the following:
                //   Use setModelAssetName() if the custom TF Model is built in as an asset (AS only).
                //   Use setModelFileName() if you have downloaded a custom team model to the Robot Controller.
                //.setModelAssetName(TFOD_MODEL_ASSET)
                .setModelFileName(TFOD_MODEL_FILE)

                // The following default settings are available to un-comment and edit as needed to
                // set parameters for custom models.
                //.setModelLabels(LABELS)
                //.setIsModelTensorFlow2(true)
                //.setIsModelQuantized(true)
                //.setModelInputSize(300)
                .setModelAspectRatio(12.0 / 9.0)

                .build();

        // Create the vision portal by using a builder.
        VisionPortal.Builder builder = new VisionPortal.Builder();

        // Set the camera (webcam vs. built-in RC phone camera).
        if (USE_WEBCAM) {
            builder.setCamera(hardwareMap.get(WebcamName.class, "Webcam 1"));
        } else {
            builder.setCamera(BuiltinCameraDirection.BACK);
        }

        // Choose a camera resolution. Not all cameras support all resolutions.
        //builder.setCameraResolution(new Size(640, 480));

        // Enable the RC preview (LiveView).  Set "false" to omit camera monitoring.
        //builder.enableLiveView(true);

        // Set the stream format; MJPEG uses less bandwidth than default YUY2.
        //builder.setStreamFormat(VisionPortal.StreamFormat.YUY2);

        // Choose whether or not LiveView stops if no processors are enabled.
        // If set "true", monitor shows solid orange screen if no processors enabled.
        // If set "false", monitor shows camera view without annotations.
        //builder.setAutoStopLiveView(false);

        // Set and enable the processor.
        builder.addProcessor(tfod);

        // Build the Vision Portal, using the above settings.
        visionPortal = builder.build();

        // Set confidence threshold for TFOD recognitions, at any time.
        //tfod.setMinResultConfidence(0.75f);

        // Disable or re-enable the TFOD processor at any time.
        //visionPortal.setProcessorEnabled(tfod, true);

    }   // end method initTfod()

    /**
     * Add telemetry about TensorFlow Object Detection (TFOD) recognitions.
     */
    public void telemetryTfod() {

        List<Recognition> currentRecognitions = tfod.getRecognitions();
        telemetry.addData("# Objects Detected", currentRecognitions.size());

        // Step through the list of recognitions and display info for each one.
        for (Recognition recognition : currentRecognitions) {
            double x = (recognition.getLeft() + recognition.getRight()) / 2 ;
            double y = (recognition.getTop()  + recognition.getBottom()) / 2 ;

            telemetry.addData(""," ");
            telemetry.addData("Image", "%s (%.0f %% Conf.)", recognition.getLabel(), recognition.getConfidence() * 100);
            telemetry.addData("- Position", "%.0f / %.0f", x, y);
            telemetry.addData("- Size", "%.0f x %.0f", recognition.getWidth(), recognition.getHeight());
            detected = true;

        }   // end for() loop

    }   // end method telemetryTfod()

}   // end class
